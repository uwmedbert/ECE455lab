<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.9.1" xml:lang="en-US">
  <compounddef id="classtf_1_1cudaDeviceAllocator" kind="class" language="C++" prot="private">
    <compoundname>tf::cudaDeviceAllocator</compoundname>
    <innerclass refid="structtf_1_1cudaDeviceAllocator_1_1rebind" prot="public">tf::cudaDeviceAllocator::rebind</innerclass>
    <templateparamlist>
      <param>
        <type>typename T</type>
      </param>
    </templateparamlist>
      <sectiondef kind="public-type">
      <memberdef kind="typedef" id="classtf_1_1cudaDeviceAllocator_1a37039db4f27e849c44b361c6d107903c" prot="public" static="no">
        <type>T</type>
        <definition>using tf::cudaDeviceAllocator&lt; T &gt;::value_type =  T</definition>
        <argsstring></argsstring>
        <name>value_type</name>
        <briefdescription>
<para>element type </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="taskflow/cuda/cuda_memory.hpp" line="392" column="3" bodyfile="taskflow/cuda/cuda_memory.hpp" bodystart="392" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="classtf_1_1cudaDeviceAllocator_1a68c29bda337094fcb9fc6f3e9445ca9c" prot="public" static="no">
        <type>T *</type>
        <definition>using tf::cudaDeviceAllocator&lt; T &gt;::pointer =  T*</definition>
        <argsstring></argsstring>
        <name>pointer</name>
        <briefdescription>
<para>element pointer type </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="taskflow/cuda/cuda_memory.hpp" line="397" column="3" bodyfile="taskflow/cuda/cuda_memory.hpp" bodystart="397" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="classtf_1_1cudaDeviceAllocator_1aef9d9622074af9b3ce50b5a63346998b" prot="public" static="no">
        <type>T &amp;</type>
        <definition>using tf::cudaDeviceAllocator&lt; T &gt;::reference =  T&amp;</definition>
        <argsstring></argsstring>
        <name>reference</name>
        <briefdescription>
<para>element reference type </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="taskflow/cuda/cuda_memory.hpp" line="402" column="3" bodyfile="taskflow/cuda/cuda_memory.hpp" bodystart="402" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="classtf_1_1cudaDeviceAllocator_1a3cce1e14aad82c9444ab3076a8f35482" prot="public" static="no">
        <type>const T *</type>
        <definition>using tf::cudaDeviceAllocator&lt; T &gt;::const_pointer =  const T*</definition>
        <argsstring></argsstring>
        <name>const_pointer</name>
        <briefdescription>
<para>const element pointer type </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="taskflow/cuda/cuda_memory.hpp" line="407" column="3" bodyfile="taskflow/cuda/cuda_memory.hpp" bodystart="407" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="classtf_1_1cudaDeviceAllocator_1a449d07320a94b00d4b09fa0f4e1ce399" prot="public" static="no">
        <type>const T &amp;</type>
        <definition>using tf::cudaDeviceAllocator&lt; T &gt;::const_reference =  const T&amp;</definition>
        <argsstring></argsstring>
        <name>const_reference</name>
        <briefdescription>
<para>constant element reference type </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="taskflow/cuda/cuda_memory.hpp" line="412" column="3" bodyfile="taskflow/cuda/cuda_memory.hpp" bodystart="412" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="classtf_1_1cudaDeviceAllocator_1ac4b1781c2f116866927701d931bf8852" prot="public" static="no">
        <type><ref refid="cpp/types/size_t" kindref="compound" external="/home/thuang295/Code/taskflow/doxygen/cppreference-doxygen-web.tag.xml">std::size_t</ref></type>
        <definition>using tf::cudaDeviceAllocator&lt; T &gt;::size_type =  std::size_t</definition>
        <argsstring></argsstring>
        <name>size_type</name>
        <briefdescription>
<para>size type </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="taskflow/cuda/cuda_memory.hpp" line="417" column="3" bodyfile="taskflow/cuda/cuda_memory.hpp" bodystart="417" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="classtf_1_1cudaDeviceAllocator_1aaacd3b516ceaa9468e40dcf1a048a453" prot="public" static="no">
        <type><ref refid="cpp/types/ptrdiff_t" kindref="compound" external="/home/thuang295/Code/taskflow/doxygen/cppreference-doxygen-web.tag.xml">std::ptrdiff_t</ref></type>
        <definition>using tf::cudaDeviceAllocator&lt; T &gt;::difference_type =  std::ptrdiff_t</definition>
        <argsstring></argsstring>
        <name>difference_type</name>
        <briefdescription>
<para>pointer difference type </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="taskflow/cuda/cuda_memory.hpp" line="422" column="3" bodyfile="taskflow/cuda/cuda_memory.hpp" bodystart="422" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="public-func">
      <memberdef kind="function" id="classtf_1_1cudaDeviceAllocator_1a5db2fe60c59fe95ceee94392508f9f82" prot="public" static="no" const="no" explicit="no" inline="yes" noexcept="yes" virt="non-virtual">
        <type></type>
        <definition>tf::cudaDeviceAllocator&lt; T &gt;::cudaDeviceAllocator</definition>
        <argsstring>() noexcept</argsstring>
        <name>cudaDeviceAllocator</name>
        <briefdescription>
<para>Constructs a device allocator object. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="taskflow/cuda/cuda_memory.hpp" line="438" column="3" bodyfile="taskflow/cuda/cuda_memory.hpp" bodystart="438" bodyend="438"/>
      </memberdef>
      <memberdef kind="function" id="classtf_1_1cudaDeviceAllocator_1a8c6f5c1a2ad3fb5d933911c18f10397e" prot="public" static="no" const="no" explicit="no" inline="yes" noexcept="yes" virt="non-virtual">
        <type></type>
        <definition>tf::cudaDeviceAllocator&lt; T &gt;::cudaDeviceAllocator</definition>
        <argsstring>(const cudaDeviceAllocator &amp;) noexcept</argsstring>
        <name>cudaDeviceAllocator</name>
        <param>
          <type>const cudaDeviceAllocator &amp;</type>
        </param>
        <briefdescription>
<para>Constructs a device allocator object from another device allocator object. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="taskflow/cuda/cuda_memory.hpp" line="443" column="3" bodyfile="taskflow/cuda/cuda_memory.hpp" bodystart="443" bodyend="443"/>
      </memberdef>
      <memberdef kind="function" id="classtf_1_1cudaDeviceAllocator_1aba7fc3e232d452c4c474225bdf4adabb" prot="public" static="no" const="no" explicit="no" inline="yes" noexcept="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename U</type>
          </param>
        </templateparamlist>
        <type></type>
        <definition>tf::cudaDeviceAllocator&lt; T &gt;::cudaDeviceAllocator</definition>
        <argsstring>(const cudaDeviceAllocator&lt; U &gt; &amp;) noexcept</argsstring>
        <name>cudaDeviceAllocator</name>
        <param>
          <type>const cudaDeviceAllocator&lt; U &gt; &amp;</type>
        </param>
        <briefdescription>
<para>Constructs a device allocator object from another device allocator object with a different element type. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="taskflow/cuda/cuda_memory.hpp" line="450" column="3" bodyfile="taskflow/cuda/cuda_memory.hpp" bodystart="450" bodyend="450"/>
      </memberdef>
      <memberdef kind="function" id="classtf_1_1cudaDeviceAllocator_1a1c5dd0ea4e5c574e57b804cfff24ec0b" prot="public" static="no" const="no" explicit="no" inline="yes" noexcept="yes" virt="non-virtual">
        <type></type>
        <definition>tf::cudaDeviceAllocator&lt; T &gt;::~cudaDeviceAllocator</definition>
        <argsstring>() noexcept</argsstring>
        <name>~cudaDeviceAllocator</name>
        <briefdescription>
<para>Destructs the device allocator object. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="taskflow/cuda/cuda_memory.hpp" line="455" column="3" bodyfile="taskflow/cuda/cuda_memory.hpp" bodystart="455" bodyend="455"/>
      </memberdef>
      <memberdef kind="function" id="classtf_1_1cudaDeviceAllocator_1a3aeae7566c71b25fc5b722f74b68a8f9" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>pointer</type>
        <definition>pointer tf::cudaDeviceAllocator&lt; T &gt;::address</definition>
        <argsstring>(reference x)</argsstring>
        <name>address</name>
        <param>
          <type>reference</type>
          <declname>x</declname>
        </param>
        <briefdescription>
<para>Returns the address of x. </para>
        </briefdescription>
        <detaileddescription>
<para>This effectively means returning &amp;x.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>x</parametername>
</parameternamelist>
<parameterdescription>
<para>reference to an object </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>a pointer to the object </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="taskflow/cuda/cuda_memory.hpp" line="465" column="11" bodyfile="taskflow/cuda/cuda_memory.hpp" bodystart="465" bodyend="465"/>
      </memberdef>
      <memberdef kind="function" id="classtf_1_1cudaDeviceAllocator_1aadbef395cbe886d2be80ba1771992ffb" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>const_pointer</type>
        <definition>const_pointer tf::cudaDeviceAllocator&lt; T &gt;::address</definition>
        <argsstring>(const_reference x) const</argsstring>
        <name>address</name>
        <param>
          <type>const_reference</type>
          <declname>x</declname>
        </param>
        <briefdescription>
<para>Returns the address of x. </para>
        </briefdescription>
        <detaileddescription>
<para>This effectively means returning &amp;x.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>x</parametername>
</parameternamelist>
<parameterdescription>
<para>reference to an object </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>a pointer to the object </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="taskflow/cuda/cuda_memory.hpp" line="475" column="17" bodyfile="taskflow/cuda/cuda_memory.hpp" bodystart="475" bodyend="475"/>
      </memberdef>
      <memberdef kind="function" id="classtf_1_1cudaDeviceAllocator_1a9cd24fe35ceef3d5cd386263b20d3093" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>pointer</type>
        <definition>pointer tf::cudaDeviceAllocator&lt; T &gt;::allocate</definition>
        <argsstring>(size_type n, const void *=0)</argsstring>
        <name>allocate</name>
        <param>
          <type><ref refid="cpp/types/size_t" kindref="compound" external="/home/thuang295/Code/taskflow/doxygen/cppreference-doxygen-web.tag.xml">size_type</ref></type>
          <declname>n</declname>
        </param>
        <param>
          <type>const void *</type>
          <defval>0</defval>
        </param>
        <briefdescription>
<para>allocates block of storage. </para>
        </briefdescription>
        <detaileddescription>
<para>Attempts to allocate a block of storage with a size large enough to contain <computeroutput>n</computeroutput> elements of member type, <computeroutput>value_type</computeroutput>, and returns a pointer to the first element.</para>
<para>The storage is aligned appropriately for object of type <computeroutput>value_type</computeroutput>, but they are not constructed.</para>
<para>The block of storage is allocated using cudaMalloc and throws <ref refid="cpp/memory/new/bad_alloc" kindref="compound" external="/home/thuang295/Code/taskflow/doxygen/cppreference-doxygen-web.tag.xml">std::bad_alloc</ref> if it cannot allocate the total amount of storage requested.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>n</parametername>
</parameternamelist>
<parameterdescription>
<para>number of elements (each of size sizeof(value_type)) to be allocated </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>a pointer to the initial element in the block of storage. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="taskflow/cuda/cuda_memory.hpp" line="493" column="11" bodyfile="taskflow/cuda/cuda_memory.hpp" bodystart="493" bodyend="501"/>
      </memberdef>
      <memberdef kind="function" id="classtf_1_1cudaDeviceAllocator_1acb6d952479fda4ac4269b9d40529a0a7" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>void tf::cudaDeviceAllocator&lt; T &gt;::deallocate</definition>
        <argsstring>(pointer ptr, size_type)</argsstring>
        <name>deallocate</name>
        <param>
          <type>pointer</type>
          <declname>ptr</declname>
        </param>
        <param>
          <type><ref refid="cpp/types/size_t" kindref="compound" external="/home/thuang295/Code/taskflow/doxygen/cppreference-doxygen-web.tag.xml">size_type</ref></type>
        </param>
        <briefdescription>
<para>Releases a block of storage previously allocated with member allocate and not yet released. </para>
        </briefdescription>
        <detaileddescription>
<para>The elements in the array are not destroyed by a call to this member function.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>ptr</parametername>
</parameternamelist>
<parameterdescription>
<para>pointer to a block of storage previously allocated with allocate </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="taskflow/cuda/cuda_memory.hpp" line="510" column="8" bodyfile="taskflow/cuda/cuda_memory.hpp" bodystart="510" bodyend="515"/>
      </memberdef>
      <memberdef kind="function" id="classtf_1_1cudaDeviceAllocator_1a095d67530352fb7be340775fe0c7b120" prot="public" static="no" const="yes" explicit="no" inline="yes" noexcept="yes" virt="non-virtual">
        <type><ref refid="cpp/types/size_t" kindref="compound" external="/home/thuang295/Code/taskflow/doxygen/cppreference-doxygen-web.tag.xml">size_type</ref></type>
        <definition>size_type tf::cudaDeviceAllocator&lt; T &gt;::max_size</definition>
        <argsstring>() const noexcept</argsstring>
        <name>max_size</name>
        <briefdescription>
<para>returns the maximum number of elements that could potentially be allocated by this allocator </para>
        </briefdescription>
        <detaileddescription>
<para>A call to member allocate with the value returned by this function can still fail to allocate the requested storage.</para>
<para><simplesect kind="return"><para>the number of elements that might be allocated as maximum by a call to member allocate </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="taskflow/cuda/cuda_memory.hpp" line="527" column="13" bodyfile="taskflow/cuda/cuda_memory.hpp" bodystart="527" bodyend="527"/>
      </memberdef>
      <memberdef kind="function" id="classtf_1_1cudaDeviceAllocator_1a280882efd5963a11aa5d79ed491c056e" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>void tf::cudaDeviceAllocator&lt; T &gt;::construct</definition>
        <argsstring>(pointer, const_reference)</argsstring>
        <name>construct</name>
        <param>
          <type>pointer</type>
        </param>
        <param>
          <type>const_reference</type>
        </param>
        <briefdescription>
<para>ignored to avoid de-referencing device pointer from the host </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="taskflow/cuda/cuda_memory.hpp" line="532" column="8" bodyfile="taskflow/cuda/cuda_memory.hpp" bodystart="532" bodyend="532"/>
      </memberdef>
      <memberdef kind="function" id="classtf_1_1cudaDeviceAllocator_1af50777c1f25a5766980d8fdbdd250b83" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>void tf::cudaDeviceAllocator&lt; T &gt;::destroy</definition>
        <argsstring>(pointer)</argsstring>
        <name>destroy</name>
        <param>
          <type>pointer</type>
        </param>
        <briefdescription>
<para>ignored to avoid de-referencing device pointer from the host </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="taskflow/cuda/cuda_memory.hpp" line="537" column="8" bodyfile="taskflow/cuda/cuda_memory.hpp" bodystart="537" bodyend="537"/>
      </memberdef>
      <memberdef kind="function" id="classtf_1_1cudaDeviceAllocator_1a1038b32b85395c5f2e206221d0f849b7" prot="public" static="no" const="yes" explicit="no" inline="yes" noexcept="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename U</type>
          </param>
        </templateparamlist>
        <type>bool</type>
        <definition>bool tf::cudaDeviceAllocator&lt; T &gt;::operator==</definition>
        <argsstring>(const cudaDeviceAllocator&lt; U &gt; &amp;) const noexcept</argsstring>
        <name>operator==</name>
        <param>
          <type>const cudaDeviceAllocator&lt; U &gt; &amp;</type>
        </param>
        <briefdescription>
<para>compares two allocator of different types using <computeroutput>==</computeroutput> </para>
        </briefdescription>
        <detaileddescription>
<para>Device allocators of different types are always equal to each other because the storage allocated by the allocator <computeroutput>a1</computeroutput> can be deallocated through <computeroutput>a2</computeroutput>. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="taskflow/cuda/cuda_memory.hpp" line="547" column="8" bodyfile="taskflow/cuda/cuda_memory.hpp" bodystart="547" bodyend="549"/>
      </memberdef>
      <memberdef kind="function" id="classtf_1_1cudaDeviceAllocator_1ae31834c1ab0a8a9c88274ff524cebbac" prot="public" static="no" const="yes" explicit="no" inline="yes" noexcept="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename U</type>
          </param>
        </templateparamlist>
        <type>bool</type>
        <definition>bool tf::cudaDeviceAllocator&lt; T &gt;::operator!=</definition>
        <argsstring>(const cudaDeviceAllocator&lt; U &gt; &amp;) const noexcept</argsstring>
        <name>operator!=</name>
        <param>
          <type>const cudaDeviceAllocator&lt; U &gt; &amp;</type>
        </param>
        <briefdescription>
<para>compares two allocator of different types using <computeroutput>!=</computeroutput> </para>
        </briefdescription>
        <detaileddescription>
<para>Device allocators of different types are always equal to each other because the storage allocated by the allocator <computeroutput>a1</computeroutput> can be deallocated through <computeroutput>a2</computeroutput>. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="taskflow/cuda/cuda_memory.hpp" line="559" column="8" bodyfile="taskflow/cuda/cuda_memory.hpp" bodystart="559" bodyend="561"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <location file="taskflow/cuda/cuda_memory.hpp" line="385" column="1" bodyfile="taskflow/cuda/cuda_memory.hpp" bodystart="385" bodyend="563"/>
    <listofallmembers>
      <member refid="classtf_1_1cudaDeviceAllocator_1a3aeae7566c71b25fc5b722f74b68a8f9" prot="public" virt="non-virtual"><scope>tf::cudaDeviceAllocator</scope><name>address</name></member>
      <member refid="classtf_1_1cudaDeviceAllocator_1aadbef395cbe886d2be80ba1771992ffb" prot="public" virt="non-virtual"><scope>tf::cudaDeviceAllocator</scope><name>address</name></member>
      <member refid="classtf_1_1cudaDeviceAllocator_1a9cd24fe35ceef3d5cd386263b20d3093" prot="public" virt="non-virtual"><scope>tf::cudaDeviceAllocator</scope><name>allocate</name></member>
      <member refid="classtf_1_1cudaDeviceAllocator_1a3cce1e14aad82c9444ab3076a8f35482" prot="public" virt="non-virtual"><scope>tf::cudaDeviceAllocator</scope><name>const_pointer</name></member>
      <member refid="classtf_1_1cudaDeviceAllocator_1a449d07320a94b00d4b09fa0f4e1ce399" prot="public" virt="non-virtual"><scope>tf::cudaDeviceAllocator</scope><name>const_reference</name></member>
      <member refid="classtf_1_1cudaDeviceAllocator_1a280882efd5963a11aa5d79ed491c056e" prot="public" virt="non-virtual"><scope>tf::cudaDeviceAllocator</scope><name>construct</name></member>
      <member refid="classtf_1_1cudaDeviceAllocator_1a5db2fe60c59fe95ceee94392508f9f82" prot="public" virt="non-virtual"><scope>tf::cudaDeviceAllocator</scope><name>cudaDeviceAllocator</name></member>
      <member refid="classtf_1_1cudaDeviceAllocator_1a8c6f5c1a2ad3fb5d933911c18f10397e" prot="public" virt="non-virtual"><scope>tf::cudaDeviceAllocator</scope><name>cudaDeviceAllocator</name></member>
      <member refid="classtf_1_1cudaDeviceAllocator_1aba7fc3e232d452c4c474225bdf4adabb" prot="public" virt="non-virtual"><scope>tf::cudaDeviceAllocator</scope><name>cudaDeviceAllocator</name></member>
      <member refid="classtf_1_1cudaDeviceAllocator_1acb6d952479fda4ac4269b9d40529a0a7" prot="public" virt="non-virtual"><scope>tf::cudaDeviceAllocator</scope><name>deallocate</name></member>
      <member refid="classtf_1_1cudaDeviceAllocator_1af50777c1f25a5766980d8fdbdd250b83" prot="public" virt="non-virtual"><scope>tf::cudaDeviceAllocator</scope><name>destroy</name></member>
      <member refid="classtf_1_1cudaDeviceAllocator_1aaacd3b516ceaa9468e40dcf1a048a453" prot="public" virt="non-virtual"><scope>tf::cudaDeviceAllocator</scope><name>difference_type</name></member>
      <member refid="classtf_1_1cudaDeviceAllocator_1a095d67530352fb7be340775fe0c7b120" prot="public" virt="non-virtual"><scope>tf::cudaDeviceAllocator</scope><name>max_size</name></member>
      <member refid="classtf_1_1cudaDeviceAllocator_1ae31834c1ab0a8a9c88274ff524cebbac" prot="public" virt="non-virtual"><scope>tf::cudaDeviceAllocator</scope><name>operator!=</name></member>
      <member refid="classtf_1_1cudaDeviceAllocator_1a1038b32b85395c5f2e206221d0f849b7" prot="public" virt="non-virtual"><scope>tf::cudaDeviceAllocator</scope><name>operator==</name></member>
      <member refid="classtf_1_1cudaDeviceAllocator_1a68c29bda337094fcb9fc6f3e9445ca9c" prot="public" virt="non-virtual"><scope>tf::cudaDeviceAllocator</scope><name>pointer</name></member>
      <member refid="classtf_1_1cudaDeviceAllocator_1aef9d9622074af9b3ce50b5a63346998b" prot="public" virt="non-virtual"><scope>tf::cudaDeviceAllocator</scope><name>reference</name></member>
      <member refid="classtf_1_1cudaDeviceAllocator_1ac4b1781c2f116866927701d931bf8852" prot="public" virt="non-virtual"><scope>tf::cudaDeviceAllocator</scope><name>size_type</name></member>
      <member refid="classtf_1_1cudaDeviceAllocator_1a37039db4f27e849c44b361c6d107903c" prot="public" virt="non-virtual"><scope>tf::cudaDeviceAllocator</scope><name>value_type</name></member>
      <member refid="classtf_1_1cudaDeviceAllocator_1a1c5dd0ea4e5c574e57b804cfff24ec0b" prot="public" virt="non-virtual"><scope>tf::cudaDeviceAllocator</scope><name>~cudaDeviceAllocator</name></member>
    </listofallmembers>
  </compounddef>
</doxygen>
